package chat;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;

import java.net.Socket;
import java.net.UnknownHostException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.TitledBorder;



public class MainChat extends JFrame implements ActionListener, Runnable{

	JList<String> roomInfo, roomUser, waitInfo;
	JScrollPane spRoomInfo, spRoomPerson, spWaitInfo;
	JButton btChange, btEnter, btExit;
	JPanel p;

	private Client client;

	private BufferedReader in;
	private OutputStream out;
	
	private String selectedRoom;

	public MainChat() {
		setTitle("WaitingRoom");
		
		client = new Client();
		roomInfo = new JList<String>();
		roomInfo.setBorder(new TitledBorder("방정보"));
		
		roomInfo.addMouseListener(new MouseAdapter() { // mouse event
			@Override
			public void mouseClicked(MouseEvent e) { 
				String str = roomInfo.getSelectedValue();

				if (str == null) {
					return;
				}

				System.out.println("STR = " + str);
				selectedRoom = str.substring(0, str.indexOf("-"));
				sendMsg("170|" + selectedRoom);
			}
		});

		roomUser = new JList<String>();
		roomUser.setBorder(new TitledBorder("User Information"));
		
		waitInfo = new JList<String>();
		waitInfo.setBorder(new TitledBorder("Room Information"));
		
		spRoomInfo = new JScrollPane(roomInfo);
		spRoomPerson = new JScrollPane(roomUser);
		spWaitInfo = new JScrollPane(waitInfo);

		btChange = new JButton("Create");
		btEnter = new JButton("Enter");
		btExit = new JButton("Exit");

		p = new JPanel();

		spRoomInfo.setBounds(10, 10, 300, 300);
		spRoomPerson.setBounds(320, 10, 150, 300);
		spWaitInfo.setBounds(10, 320, 300, 130);

		btChange.setBounds(320, 330, 150, 30);
		btEnter.setBounds(320, 370, 150, 30);
		btExit.setBounds(320, 410, 150, 30);

		p.setLayout(null);
		p.setBackground(Color.orange);
		p.add(spRoomInfo);
		p.add(spRoomPerson);
		p.add(spWaitInfo);
		p.add(btChange);
		p.add(btEnter);
		p.add(btExit);

		add(p);
		setBounds(300, 200, 500, 500);
		setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		connect();// server Connect

		new Thread(this).start();// waiting for server message

		sendMsg("100|");// alarm
		String nickName = JOptionPane.showInputDialog(this, "Title:");
		sendMsg("150|" + nickName);
		eventListener();
	}

	private void eventListener() { // event
		// waiting room
		btChange.addActionListener(this);
		btEnter.addActionListener(this);
		btExit.addActionListener(this);

		// client room
		client.tfSend.addActionListener(this);
		client.btChange.addActionListener(this);
		client.btExit.addActionListener(this);

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		Object ob = e.getSource();
		
		if (ob == btChange) {// request create room
			String title = JOptionPane.showInputDialog(this, "RoomTitle:");

			// send room title to server
			sendMsg("160|" + title);
			client.setTitle("CharRoom-[" + title + "]");
			sendMsg("175|");
			setVisible(false);
			client.setVisible(true);
		} else if (ob == btEnter) { // request enter room
			if (selectedRoom == null) {
				JOptionPane.showMessageDialog(this, "Choice room!");
				return;
			}

			sendMsg("200|" + selectedRoom);
			sendMsg("175|");

			setVisible(false);
			client.setVisible(true);
		} else if (ob == client.btExit) { // request exit room
			sendMsg("400|");
			client.setVisible(false);
			setVisible(true);
		} else if (ob == client.tfSend) {// request send message
			String msg = client.tfSend.getText();

			if (msg.length() > 0) {

				sendMsg("300|" + msg);

				cc.sendTF.setText("");

			}

		}

		else if (ob == btExit) {// 나가기(프로그램종료) 요청

			System.exit(0);// 현재 응용프로그램 종료하기

		}

	}// actionPerformed

	public void connect() {// (소켓)서버연결 요청

		try {

			// Socket s = new Socket(String host<서버ip>, int port<서비스번호>);

			Socket s = new Socket("localhost", 5000);// 연결시도

			in = new BufferedReader(new InputStreamReader(s.getInputStream()));

			// in: 서버메시지 읽기객체 서버-----msg------>클라이언트

			out = s.getOutputStream();

			// out: 메시지 보내기, 쓰기객체 클라이언트-----msg----->서버

		} catch (UnknownHostException e) {

			e.printStackTrace();

		} catch (IOException e) {

			e.printStackTrace();

		}

	}// connect

	public void sendMsg(String msg) {// 서버에게 메시지 보내기

		try {

			out.write((msg + "\n").getBytes());

		} catch (IOException e) {

			e.printStackTrace();

		}

	}// sendMsg

	public void run() {// 서버가 보낸 메시지 읽기

		// 왜 run메소드 사용? GUI프로그램실행에 영향 미치지않는 코드 작성.

//메소드호출은 순차적인 실행!!  스레드메소드는 동시실행(기다리지 않는 별도 실행)!!

		try {

			while (true) {

				String msg = in.readLine();// msg: 서버가 보낸 메시지

				// msg==> "300|안녕하세요" "160|자바방--1,오라클방--1,JDBC방--1"

				String msgs[] = msg.split("\\|");

				String protocol = msgs[0];

				switch (protocol) {

				case "300":

					cc.ta.append(msgs[1] + "\n");

					cc.ta.setCaretPosition(cc.ta.getText().length());

					break;

				case "160":// 방만들기

					// 방정보를 List에 뿌리기

					if (msgs.length > 1) {

						// 개설된 방이 한개 이상이었을때 실행

						// 개설된 방없음 ----> msg="160|" 였을때 에러

						String roomNames[] = msgs[1].split(",");

						// "자바방--1,오라클방--1,JDBC방--1"

						roomInfo.setListData(roomNames);

					}

					break;

				case "170":// (대기실에서) 대화방 인원정보

					String roomInwons[] = msgs[1].split(",");

					roomUser.setListData(roomInwons);

					break;

				case "175":// (대화방에서) 대화방 인원정보

					String myRoomInwons[] = msgs[1].split(",");

					cc.li_inwon.setListData(myRoomInwons);

					break;

				case "180":// 대기실 인원정보

					String waitNames[] = msgs[1].split(",");

					waitInfo.setListData(waitNames);

					break;

				case "200":// 대화방 입장

					cc.ta.append("=========[" + msgs[1] + "]님 입장=========\n");

					cc.ta.setCaretPosition(cc.ta.getText().length());

					break;

				case "400":// 대화방 퇴장

					cc.ta.append("=========[" + msgs[1] + "]님 퇴장=========\n");

					cc.ta.setCaretPosition(cc.ta.getText().length());

					break;

				case "202":// 개설된 방의 타이틀 제목 얻기

					cc.setTitle("채팅방-[" + msgs[1] + "]");

					break;

				}// 클라이언트 switch

			}

		} catch (IOException e) {

			e.printStackTrace();

		}

	}// run

	public static void main(String[] args) {

		new MainChat();

	}



}