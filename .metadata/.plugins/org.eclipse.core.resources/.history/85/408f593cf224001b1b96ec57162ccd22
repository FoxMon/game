package multi;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.util.ArrayList;
import java.util.List;
import common.*;

public class PersonalServer extends Thread {

	static UserAccountPool accountPool; // current user
	static DatagramSocket ds; // for udp socket
	static List<Room> rooms; // room manage
	
	static {
		accountPool = new UserAccountPool();
		rooms = new ArrayList<>();
		
		try {
			ds = new DatagramSocket(56789);
		} catch(IOException e) {
			System.out.println("Alarm socket failed... " + e.getMessage());
		}
	}
	
	static void sendAlarmToAll(String alarm) { // send udp
		DatagramPacket dp = new DatagramPacket(alarm.getBytes(), alarm.getBytes().length);
		
		for(Account a : accountPool.getCurrentUser()) {
			dp.setSocketAddress(a.getSocketAddress());
			
            try {
                System.out.println("server UDP send");
                
                ds.send(dp);
            }catch(IOException e) {
                System.out.println("[server-Thread] send alarm failed .. " + e.toString());
            }
            
		}
	}
	
	static void sendAlarmToUser(SocketAddress sa, String alaram) { // send udp to one
		DatagramPacket dp = new DatagramPacket(alaram.getBytes(), alaram.getBytes().length);
		dp.setSocketAddress(sa);
		
		try {
			System.out.println("Send UDP send...");
			
			ds.send(dp);
		} catch(IOException e) {
			System.out.println("[Server-Thread] send alarm failed... ", e.getMessage());
		}
	}
	
	
	static void sendAlarmToUsers(Room r, String alaram) { // send users
		DatagramPacket dp = new DatagramPacket(alasram.getBytes(), alaram.getBytes().length);
	    
        for(Account a : r.getJoiner()) {
            SocketAddress sa = a.getSocketAddress();
            dp.setSocketAddress(sa);
            
            try {
                System.out.println("server UDP send");
                System.out.println("txt"+alaram);
                ds.send(dp);
            }catch(IOException e) {
                System.out.println("[server-Thread] send alarm failed .. " + e.getMessage());
            }
        }
        
	}
	
    private Socket socket;
    private ObjectOutputStream oos;
    private ObjectInputStream ois;
    private Account user; // current user
    
    public PersonalServer(Socket socket) { // constructor
        this.socket = socket;
        try {
            oos = new ObjectOutputStream(socket.getOutputStream());
            ois = new ObjectInputStream(socket.getInputStream());
        }catch(IOException e) {
        	
        }
        
    }
   
    @Override
    public void run() {
        String[] command = null;
        
        while(socket.isConnected()) {
            String received;
            
            try {
                received = (String)ois.readObject();
            }catch(IOException | ClassNotFoundException e) {
                System.out.println("[Server] closed...");
            }
            
            System.out.println("[server] received : " + received);
            
            command = received.split("#"); // #
            Object resp = null;
            
            System.out.println(command[0]);
            
            switch(command[0]) {
                
                // 클라이언트의 요청에 따른 처리
                    
            }
        }
        
    }
    
    private void sendToClient(Object resp) { // TCP
        try {
            oos.reset();    
            oos.writeObject(resp);
            System.out.println(resp);
        }catch(IOException e) {
            System.out.println("Server write fail... " + e.getMessage());
        }
    }
    
}
